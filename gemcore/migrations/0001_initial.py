# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-16 15:06
from __future__ import unicode_literals

import datetime
from decimal import Decimal
from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone

from gemcore.constants import ChoicesMixin


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('slug', models.SlugField(unique=True)),
                ('currency', models.CharField(choices=ChoicesMixin.CURRENCY_CHOICES, max_length=3)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ('currency', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('slug', models.SlugField(unique=True)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateField(default=datetime.datetime.today)),
                ('what', models.TextField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('is_income', models.BooleanField(default=False, verbose_name='Income?')),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=ChoicesMixin.TAG_CHOICES, max_length=256), size=None)),
                ('country', models.CharField(choices=ChoicesMixin.COUNTRY_CHOICES, max_length=2)),
                ('notes', models.TextField(blank=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemcore.Account')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemcore.Book')),
                ('who', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Entries',
            },
        ),
        migrations.CreateModel(
            name='EntryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_slug', models.TextField()),
                ('who_username', models.TextField()),
                ('when', models.TextField()),
                ('what', models.TextField()),
                ('account_slug', models.TextField()),
                ('amount', models.TextField()),
                ('is_income', models.BooleanField()),
                ('tags', models.TextField()),
                ('country_code', models.CharField(choices=ChoicesMixin.COUNTRY_CHOICES, max_length=2)),
                ('notes', models.TextField(blank=True)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('reason', models.CharField(choices=[('delete', 'delete'), ('merge', 'merge')], max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='ParserConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
                ('country', models.CharField(choices=ChoicesMixin.COUNTRY_CHOICES, max_length=2)),
                ('date_format', models.CharField(default='%Y-%m-%d', max_length=128)),
                ('decimal_point', models.CharField(default='.', max_length=1)),
                ('thousands_sep', models.CharField(default=',', max_length=1)),
                ('ignore_rows', models.PositiveSmallIntegerField()),
                ('when', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), size=None)),
                ('what', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), size=None)),
                ('amount', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), size=2)),
                ('notes', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(), blank=True, default=list, size=None)),
                ('defer_processing', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='TagRegex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('regex', models.TextField()),
                ('tag', models.CharField(choices=ChoicesMixin.TAG_CHOICES, max_length=256)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gemcore.Account')),
                ('transfer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='gemcore.Account')),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='parser_config',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='gemcore.ParserConfig'),
        ),
        migrations.AddField(
            model_name='account',
            name='users',
            field=models.ManyToManyField(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='tagregex',
            unique_together=set([('account', 'regex', 'tag')]),
        ),
        migrations.AlterUniqueTogether(
            name='entry',
            unique_together=set([('book', 'account', 'when', 'what', 'amount', 'is_income')]),
        ),
    ]
